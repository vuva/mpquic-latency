package main

import (
	"bytes"
	"encoding/binary"

	// "errors"
	"flag"
	"fmt"
	"io"
	"log"
	"math/rand"
	"net"
	"os"

	"strconv"
	"strings"
	"time"

	// "crypto/tls"

	// quic "github.com/lucas-clemente/quic-go"
	"github.com/lucas-clemente/quic-go/h2quic"

	// "github.com/lucas-clemente/quic-go/internal/crypto"
	"github.com/lucas-clemente/quic-go/internal/testdata"
	// "quic-go"
	//	"io/ioutil"
)

var BASE_SEQ_NO uint = 2147483648 // 0x80000000
var LOG_PREFIX string = ""

type ClientManager struct {
	clients    map[*Client]bool
	broadcast  chan []byte
	register   chan *Client
	unregister chan *Client
}

type Client struct {
	socket net.Conn
	data   chan []byte
}

func (manager *ClientManager) start() {
	for {
		select {
		case connection := <-manager.register:
			manager.clients[connection] = true
			fmt.Println("Added new connection!")
		case connection := <-manager.unregister:
			if _, ok := manager.clients[connection]; ok {
				close(connection.data)
				delete(manager.clients, connection)
				fmt.Println("A connection has terminated!")
			}
		case message := <-manager.broadcast:
			for connection := range manager.clients {
				select {
				case connection.data <- message:
				default:
					close(connection.data)
					delete(manager.clients, connection)
				}
			}
		}
	}
}

func (manager *ClientManager) receive(client *Client) {

	timeStamps := make(map[uint]uint)
	buffer := make([]byte, 0)
	for {
		message := make([]byte, 65536)
		length, err := client.socket.Read(message)
		if err != nil {
			log.Println(err)
			manager.unregister <- client
			client.socket.Close()
			break
		}
		if length > 0 {
			message = message[0:length]
			//			log.Printf("\n RECEIVED: %x \n", message)
			// manager.broadcast <- message
			eoc_byte_index := bytes.Index(message, intToBytes(uint(BASE_SEQ_NO-1), 4))
			log.Println(eoc_byte_index)

			for eoc_byte_index != -1 {
				data_chunk := append(buffer, message[0:eoc_byte_index+4]...)
				//				seq_no := message[eoc_byte_index-4:eoc_byte_index]
				//				log.Printf("\n CHUNK: %x \n  length %d \n", data_chunk, len(data_chunk))
				// Get data chunk ID and record receive timestampt
				seq_no := data_chunk[0:4]
				seq_no_int := bytesToInt(seq_no)
				timeStamps[seq_no_int] = uint(time.Now().UnixNano())
				//				buffer.Write(message[eoc_byte_index:length])

				// Cut out recorded chunk
				message = message[eoc_byte_index+4:]
				buffer = make([]byte, 0)
				eoc_byte_index = bytes.Index(message, intToBytes(uint(BASE_SEQ_NO-1), 4))
			}
			buffer = append(buffer, message...)
		}
	}

	writeToFile(LOG_PREFIX+"server-timestamp.log", timeStamps)
}

func (client *Client) receive() {
	for {
		message := make([]byte, 4096)
		length, err := client.socket.Read(message)
		if err != nil {
			client.socket.Close()
			break
		}
		if length > 0 {
			log.Println("RECEIVED: " + string(message))
		}
	}
}

func (manager *ClientManager) send(client *Client) {
	defer client.socket.Close()
	for {
		select {
		case message, ok := <-client.data:
			if !ok {
				return
			}
			client.socket.Write(message)
		}
	}
}

func startServerMode(protocol string, multipath bool, log_file string) {
	log.Println("Starting server...")
	var listener net.Listener
	var err error
	manager := ClientManager{
		clients:    make(map[*Client]bool),
		broadcast:  make(chan []byte),
		register:   make(chan *Client),
		unregister: make(chan *Client),
	}
	go manager.start()

	switch protocol {
	case "tcp":

		listener, err = net.Listen("tcp", ":12345")
		if err != nil {
			log.Println(err)
		}
		log.Println("TCP Listen ...")
		for {
			connection, _ := listener.Accept()
			if err != nil {
				log.Println(err)
			}
			client := &Client{socket: connection, data: make(chan []byte)}
			manager.register <- client
			go manager.receive(client)
			//		go manager.send(client)
		}
	case "quic":
		// testErr := errors.New("listen error")
		// quicListenAddr := func(addr string, tlsConf *tls.Config, config *quic.Config) (quic.Listener, error) {
		// 	return nil, testErr
		// }
		fullpem, privkey := testdata.GetCertificatePaths()
		log.Println("QUIC Listen ...")
		err := h2quic.ListenAndServeQUIC("localhost:12345", fullpem, privkey, nil, true)

		if err != nil {
			log.Println(err)
		}
	}

}

func startClientMode(address string, run_time uint, csize_distro string, csize_value float64, arrival_distro string, arrival_value float64) {
	fmt.Println("Starting client...")
	connection, error := net.Dial("tcp", address+":12345")
	//	addr,_:=net.ResolveTCPAddr("tcp", address+":12345")
	//	connection, error := net.DialTCP("tcp", nil, addr)

	if error != nil {
		log.Println(error)
	}

	//	error = connection.SetNoDelay(true)
	//	if error != nil {
	//	    log.Println(error.Error())
	//	}
	//	client := &Client{socket: connection}
	//	go client.receive()

	sendingDone := make(chan bool)
	//	go client.send(connection ,run_time , csize_distro , csize_value , arrival_distro , arrival_value )

	go func() {
		var run_time_duration time.Duration
		run_time_duration, error = time.ParseDuration(strconv.Itoa(int(run_time)) + "ms")
		if error != nil {
			log.Println(error)
		}

		startTime := time.Now()
		timeStamps := make(map[uint]uint)
		for i := 1; time.Now().Sub(startTime) < run_time_duration; i++ {
			// reader := bufio.NewReader(os.Stdin)
			// message, _ := reader.ReadString('\n')
			//			log.Printf("before: %d \n", time.Now().UnixNano())
			message, seq_no := generateMessage(uint(i), csize_distro, csize_value)
			connection.Write(message)
			//			log.Printf("after: %d \n", time.Now().UnixNano())
			timeStamps[seq_no] = uint(time.Now().UnixNano())
			wait(1 / getRandom(arrival_distro, arrival_value))
		}
		writeToFile(LOG_PREFIX+"client-timestamp.log", timeStamps)
		sendingDone <- true
	}()
	<-sendingDone
}

func startQUICClient() {

	cl := &client{
		config:                 config,
		connectionID:           0x1337,
		session:                sess,
		version:                protocol.SupportedVersions[0],
		pconnMgr:               pconnMgr,
		versionNegotiationChan: make(chan struct{}),
	}
}

//func (client *Client) send(connection net.Conn,run_time uint, csize_distro string, csize_value float64, arrival_distro string, arrival_value float64) {
//
//	run_time_duration, error := time.ParseDuration(strconv.Itoa(int(run_time)) + "ms")
//	if error != nil {
//		log.Println(error)
//	}
//
//	startTime := time.Now()
//	timeStamps := make(map[uint]uint)
//	for i:=1; time.Now().Sub(startTime) < run_time_duration;i++ {
//		// reader := bufio.NewReader(os.Stdin)
//		// message, _ := reader.ReadString('\n')
//		message, seq_no := generateMessage(uint(i),csize_distro, csize_value)
//		connection.Write(message)
//		timeStamps[seq_no] = uint(time.Now().UnixNano())
//		wait(getRandom(arrival_distro, arrival_value))
//	}
//	writeToFile("client-timestamp.log", timeStamps)
//
//}

// wait for interarrival_time second
func wait(interarrival_time float64) {
	waiting_time := time.Duration(interarrival_time*1000000000) * time.Nanosecond
	//	log.Printf("wait for %d ms \n", waiting_time.Nanoseconds()/1000000)
	time.Sleep(waiting_time)
}

func getRandom(distro string, value float64) float64 {
	var retVal float64
	switch distro {
	case "c":
		retVal = value
	case "e":
		retVal = rand.ExpFloat64() * value
	case "g":

	case "b":

	case "wei":

	default:
		retVal = 1.0
	}

	return retVal
}

func generateMessage(offset_seq uint, csize_distro string, csize_value float64) ([]byte, uint) {
	//	log.Printf("Gen mess: %d \n", time.Now().UnixNano())
	seq_no := BASE_SEQ_NO + offset_seq
	seq_header := intToBytes(uint(seq_no), 4)
	eoc_header := intToBytes(uint(BASE_SEQ_NO-1), 4)

	csize := uint(getRandom(csize_distro, csize_value))
	//chunk size must be a factor of 4 to avoid EOL fragmenting
	csize = csize - csize%4
	if csize < 8 {
		csize = 8
	}

	pseudo_payload := make([]byte, (csize - 8))
	for i := 0; i < len(pseudo_payload); i++ {
		pseudo_payload[i] = 0x01
	}

	message := append(seq_header, pseudo_payload...)
	//	message = append(message, seq_header...)
	message = append(message, eoc_header...)
	//	log.Printf("Message size %d: %x \n ", uint(csize), message)
	return message, seq_no
}

func intToBytes(num uint, size uint) []byte {
	bs := make([]byte, size)
	binary.BigEndian.PutUint32(bs, uint32(num))
	return bs
}

func bytesToInt(b []byte) uint {
	return uint(binary.BigEndian.Uint32(b))
}

func writeToFile(filename string, data map[uint]uint) error {
	file, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer file.Close()

	for k, v := range data {

		_, err = io.WriteString(file, fmt.Sprintln(k, v))
		if err != nil {
			return err
		}
	}

	return file.Sync()
}

func main() {
	flagMode := flag.String("mode", "server", "start in client or server mode")
	flagTime := flag.Uint("time", 10000, "time to run (default 60000ms)")
	flagCsizeDistro := flag.String("csizedist", "c", "data chunk size distribution")
	flagCsizeValue := flag.Float64("csizeval", 1000, "data chunk value value")
	flagArrDistro := flag.String("arrdist", "c", "arrival distribution")
	flagArrValue := flag.Float64("arrval", 1000, "arrival value")
	flagAddress := flag.String("add", "localhost", "Destination address")
	flagProtocol := flag.String("p", "tcp", "TCP or QUIC")
	flagLog := flag.String("log", "", "Log folder")
	flagMultipath := flag.Bool("m", true, "Enable multipath")
	//	flagDebug := flag.Bool("debug", false, "Debug mode")
	flag.Parse()
	//	if !*flagDebug{
	//		log.SetOutput(ioutil.Discard)
	//	}

	LOG_PREFIX = *flagLog
	if strings.ToLower(*flagMode) == "server" {
		startServerMode(*flagProtocol, *flagMultipath, *flagLog)
	} else {
		startClientMode(*flagAddress, *flagTime, *flagCsizeDistro, float64(*flagCsizeValue), *flagArrDistro, float64(*flagArrValue))
	}
}
